// Place your key bindings in this file to override the defaults
[
  // REPL-TERMINAL INTERATION
  {
    "key": "ctrl+k ctrl+enter",
    "command": "editor.debug.action.selectionToRepl",
    "when": "inDebugMode"
  },
  {
    "key": "ctrl+enter",
    "command": "-editor.action.insertLineAfter",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+enter",
    "command": "workbench.action.terminal.runSelectedText",
    "when": "editorTextFocus && terminalIsOpen && !editorHasSelection"
  },
  {
    "key": "ctrl+enter",
    "command": "python.execSelectionInTerminal",
    "when": "editorFocus && terminalIsOpen && editorHasSelection && resourceExtname == .py"
  },
  {
    "key": "ctrl+enter",
    "command": "workbench.action.terminal.runSelectedText",
    "when": "editorTextFocus && terminalIsOpen && editorHasSelection && resourceExtname == .sh"
  },
  {
    "key": "ctrl+enter",
    "command": "extension.multiCommand.execute",
    "args": {
      "command": "multiCommand.tsSendRegion"
    },
    "when": "editorTextFocus && terminalIsOpen && editorHasSelection && resourceExtname == .ts"
  },
  // {
  //   "key": "ctrl+enter",
  //   "command": "extension.multiCommand.execute",
  //   "args": {
  //     "command": "multiCommand.chromiumSend"
  //   },
  //   "when": "editorTextFocus && terminalIsOpen && resourceExtname == .js"
  // },
  {
    "key": "ctrl+\\",
    "command": "workbench.action.terminal.sendSequence",
    "args": {
      "text": "\u000C"
    },
    "when": "editorTextFocus && terminalIsOpen && resourceExtname != .js"
  },
  {
    "key": "ctrl+\\",
    "command": "extension.multiCommand.execute",
    "args": {
      "command": "multiCommand.chromiumClear"
    },
    "when": "editorTextFocus && terminalIsOpen && resourceExtname == .js"
  },
  {
    "key": "ctrl+shift+\\",
    "command": "workbench.action.tasks.runTask",
    "args": ".exit",
    "when": "editorTextFocus && terminalIsOpen && resourceExtname == .ts"
  },
  {
    "key": "ctrl+shift+\\",
    "command": "workbench.action.terminal.sendSequence",
    "when": "editorTextFocus && terminalIsOpen && resourceExtname == .py",
    "args": {
      "text": "plt.clf()\n"
    }
  },
  {
    "key": "alt+shift+l",
    "command": "extension.multiCommand.execute",
    "args": {
      "command": "multiCommand.selectStartEnd"
    },
    "when": "editorTextFocus"
  },
  // {
  //   "key": "ctrl+k shift+alt+left",
  //   "command": "workbench.action.terminal.sendSequence",
  //   "args": {
  //     "text": "${fileDirname}"
  //   }
  // },
  {
    "key": "alt+shift+t",
    "command": "workbench.action.terminal.sendSequence",
    "args": {
      "text": "cd ${workspaceFolder}\n\u000C"
    }
  },
  {
    "key": "ctrl+alt+shift+\\",
    "command": "workbench.action.terminal.sendSequence",
    "when": "editorTextFocus && terminalIsOpen",
    "args": {
      "text": ".load ${relativeFile}\n"
    }
  },
  {
    "key": "alt+shift+\\",
    "when": "editorTextFocus && terminalIsOpen",
    "command": "extension.multiCommand.execute",
    "args": {
      "command": "multiCommand.tsLoadImports"
    },
  },
  {
    "key": "ctrl+k ctrl+shift+\\",
    "command": "workbench.action.tasks.runTask",
    "args": ".load",
    "when": "editorTextFocus && terminalIsOpen && resourceExtname == .ts"
  },
  {
    "key": "ctrl+k ctrl+shift+\\",
    "command": "workbench.action.terminal.sendSequence",
    "args": {
      "text": "exit\n"
    },
    "when": "editorTextFocus && terminalIsOpen && resourceExtname == .py",
  },

  {
    "key": "ctrl+k alt+shift+left",
    "command": "workbench.action.terminal.sendSequence",
    "args": {
      "text": "\u001b[1;2D"
    }
  },
  {
    "key": "ctrl+k alt+shift+right",
    "command": "workbench.action.terminal.sendSequence",
    "args": {
      "text": "\u001b[1;2C"
    }
  },
  {
    "key": "ctrl+v",
    "command": "workbench.action.terminal.paste",
    "when": "terminalFocus"
  },
  // SWITCH TABS
  {
    "key": "ctrl+pageup",
    "command": "-workbench.action.previousEditor"
  },
  {
    "key": "ctrl+pagedown",
    "command": "-workbench.action.nextEditor"
  },
  {
    "key": "shift+alt+tab",
    "command": "workbench.action.previousEditorInGroup"
  },
  {
    "key": "alt+tab",
    "command": "workbench.action.nextEditorInGroup"
  },
  {
    "key": "shift+enter",
    "command": "editor.action.insertLineAfter",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "shift+alt+d",
    "command": "editor.action.copyLinesDownAction",
    "when": "editorTextFocus && !editorReadonly"
  },
  // SPACE BLOCK EXTENSIONS
  {
    "key": "alt+]",
    "command": "spaceBlockJumper.moveDown",
    "when": "textInputFocus"
  },
  {
    "key": "alt+[",
    "command": "spaceBlockJumper.moveUp",
    "when": "textInputFocus"
  },
  {
    "key": "alt+shift+]",
    "command": "spaceBlockJumper.selectDown",
    "when": "textInputFocus"
  },
  {
    "key": "alt+shift+[",
    "command": "spaceBlockJumper.selectUp",
    "when": "textInputFocus"
  },
  {
    "key": "alt+shift+'",
    "command": "extension.multiCommand.execute",
    "args": {
      "sequence": [
        "spaceBlockJumper.moveDown",
        "spaceBlockJumper.selectUp"
      ]
    }
  },
  // REMAP THE NAVIGATION KEYS
  {
    "key": "ctrl+left",
    "command": "cursorWordPartLeft",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+shift+left",
    "command": "cursorWordPartLeftSelect",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+right",
    "command": "cursorWordPartRight",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+shift+right",
    "command": "cursorWordPartRightSelect",
    "when": "textInputFocus"
  },
  // SNIPPETS
  {
    "key": "alt+shift+/",
    "command": "editor.action.insertSnippet",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+shift+/",
    "command": "editor.action.insertSnippet",
    "when": "editorTextFocus",
    "args": {
      "name": "comment.snippets"
    }
  },
  {
    "key": "ctrl+alt+/",
    "command": "editor.action.insertSnippet",
    "when": "editorTextFocus",
    "args": {
      "name": "comment.major"
    }
  },
  // SETTINGS
  {
    "key": "ctrl+k ctrl+,",
    "command": "workbench.action.openSettings"
  },
  {
    "key": "ctrl+,",
    "command": "-workbench.action.openSettings"
  },
  {
    "key": "ctrl+k ctrl+r",
    "command": "-workbench.action.keybindingsReference"
  },
  {
    "key": "ctrl+k alt+s",
    "command": "workbench.action.openGlobalKeybindingsFile"
  },
  {
    "key": "ctrl+k alt+,",
    "command": "workbench.action.openSettingsJson"
  },
  {
    "key": "ctrl+k alt+o",
    "command": "workbench.action.quickOpenRecent"
  },
  {
    "key": "ctrl+alt+j",
    "command": "-liveshare.join",
    "when": "liveshare:state != 'Joined' && liveshare:state != 'Shared'"
  },
  {
    "key": "ctrl+shift+j",
    "command": "editor.action.joinLines"
  },
  {
    "key": "alt+d",
    "command": "workbench.view.debug"
  },
  {
    "key": "ctrl+shift+d",
    "command": "-workbench.view.debug"
  },
  {
    "key": "ctrl+shift+w",
    "command": "workbench.action.closeEditorsInGroup"
  },
  {
    "key": "ctrl+k w",
    "command": "-workbench.action.closeEditorsInGroup"
  },
  {
    "key": "ctrl+shift+w",
    "command": "-workbench.action.closeWindow"
  },
  {
    "key": "ctrl+k ctrl+u",
    "command": "-editor.action.removeCommentLine",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+k ctrl+u",
    "command": "editor.action.transformToUppercase"
  },
  {
    "key": "ctrl+k alt+u",
    "command": "editor.action.transformToLowercase"
  },
  {
    "key": "shift+alt+1",
    "command": "-workbench.action.moveEditorToFirstGroup"
  },
  {
    "key": "alt+1",
    "command": "-workbench.action.openEditorAtIndex1"
  },
  {
    "key": "alt+2",
    "command": "-workbench.action.openEditorAtIndex2"
  },
  {
    "key": "alt+3",
    "command": "-workbench.action.openEditorAtIndex3"
  },
  {
    "key": "ctrl+0",
    "command": "-workbench.action.focusSideBar"
  },
  {
    "key": "alt+2",
    "command": "workbench.action.focusActiveEditorGroup"
  },
  {
    "key": "alt+3",
    "command": "workbench.action.focusPanel"
  },
  {
    "key": "shift+alt+1",
    "command": "workbench.action.toggleSidebarVisibility"
  },
  {
    "key": "ctrl+b",
    "command": "-workbench.action.toggleSidebarVisibility"
  },
  {
    "key": "ctrl+j",
    "command": "-workbench.action.togglePanel"
  },
  {
    "key": "shift+alt+2",
    "command": "workbench.action.toggleEditorVisibility"
  },
  {
    "key": "alt+9",
    "command": "-workbench.action.openEditorAtIndex9"
  },
  {
    "key": "alt+0",
    "command": "-workbench.action.lastEditorInGroup"
  },
  {
    "key": "alt+9",
    "command": "workbench.action.focusFirstEditorGroup"
  },
  {
    "key": "ctrl+1",
    "command": "-workbench.action.focusFirstEditorGroup"
  },
  {
    "key": "ctrl+k ctrl+up",
    "command": "-workbench.action.focusAboveGroup"
  },
  {
    "key": "ctrl+k ctrl+down",
    "command": "-workbench.action.focusBelowGroup"
  },
  {
    "key": "ctrl+k ctrl+left",
    "command": "-workbench.action.focusLeftGroup"
  },
  {
    "key": "ctrl+k ctrl+right",
    "command": "-workbench.action.focusRightGroup"
  },
  {
    "key": "ctrl+k ctrl+'",
    "command": "workbench.action.toggleEditorGroupLayout"
  },
  {
    "key": "shift+alt+0",
    "command": "-workbench.action.toggleEditorGroupLayout"
  },
  {
    "key": "ctrl+k ctrl+;",
    "command": "workbench.action.toggleEditorWidths",
  },
  {
    "key": "ctrl+k ctrl+/",
    "command": "extension.multiCommand.execute",
    "args": {
      "sequence": [
        "workbench.action.positionPanelBottom",
        {
          "command": "workbench.action.terminal.sendSequence",
          "args": {
            "text": "\u0011H" 
          },
        },
        "workbench.action.evenEditorWidths"
      ]
    },
    "when": "panelPosition == 'right'"
  },
  {
    "key": "ctrl+k ctrl+/",
    "command": "extension.multiCommand.execute",
    "args": {
      "sequence": [
        "workbench.action.positionPanelRight",
        {
          "command": "workbench.action.terminal.sendSequence",
          "args": {
            "text": "\u0011V" 
          },
        },
        "workbench.action.minimizeOtherEditors"
      ]
    },
    "when": "panelPosition == 'bottom'"
  },
  {
    "key": "ctrl+k right",
    "command": "workbench.action.newGroupRight"
  },
  {
    "key": "ctrl+k down",
    "command": "workbench.action.newGroupBelow"
  },
  {
    "key": "shift+alt+9",
    "command": "-workbench.action.moveEditorToLastGroup"
  },
  {
    "key": "alt+8",
    "command": "-workbench.action.openEditorAtIndex8"
  },
  {
    "key": "alt+8",
    "command": "workbench.action.pinEditor",
    "when": "!activeEditorIsPinned"
  },
  {
    "key": "ctrl+k shift+enter",
    "command": "-workbench.action.pinEditor",
    "when": "!activeEditorIsPinned"
  },
  {
    "key": "shift+alt+8",
    "command": "workbench.action.unpinEditor",
    "when": "activeEditorIsPinned"
  },
  {
    "key": "ctrl+k shift+enter",
    "command": "-workbench.action.unpinEditor",
    "when": "activeEditorIsPinned"
  },
  {
    "key": "ctrl+alt+shift+left",
    "command": "workbench.action.moveEditorLeftInGroup"
  },
  {
    "key": "ctrl+shift+pageup",
    "command": "-workbench.action.moveEditorLeftInGroup"
  },
  {
    "key": "ctrl+alt+shift+right",
    "command": "workbench.action.moveEditorRightInGroup"
  },
  {
    "key": "ctrl+shift+pagedown",
    "command": "-workbench.action.moveEditorRightInGroup"
  },
  {
    "key": "alt+.",
    "command": "editor.action.smartSelect.expand",
    "when": "editorTextFocus"
  },
  {
    "key": "shift+alt+right",
    "command": "-editor.action.smartSelect.expand",
    "when": "editorTextFocus"
  },
  {
    "key": "alt+,",
    "command": "editor.action.smartSelect.shrink",
    "when": "editorTextFocus"
  },
  {
    "key": "shift+alt+left",
    "command": "-editor.action.smartSelect.shrink",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+shift+up",
    "command": "-editor.action.insertCursorAbove",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+shift+down",
    "command": "-editor.action.insertCursorBelow",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+shift+left",
    "command": "-workbench.action.terminal.resizePaneLeft",
    "when": "terminalFocus && terminalProcessSupported"
  },
  {
    "key": "ctrl+shift+right",
    "command": "-workbench.action.terminal.resizePaneRight",
    "when": "terminalFocus && terminalProcessSupported"
  },
  {
    "key": "ctrl+shift+space", // whatever, even "escape"
    "command": "editor.action.triggerParameterHints",
    "when": "editorHasSignatureHelpProvider && editorTextFocus"
  },
  {
    "key": "ctrl+shift+space", // use same keybinding as above here fro toggle
    "command": "closeParameterHints",
    "when": "editorHasSignatureHelpProvider && editorTextFocus && parameterHintsVisible"
  },
  {
    "key": "ctrl+k ctrl+.",
    "command": "editor.action.jumpToBracket",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+shift+\\",
    "command": "-editor.action.jumpToBracket",
    "when": "editorTextFocus"
  },
  {
    "key": "Escape",
    "command": "extension.jumpy-exit",
    "when": "editorTextFocus && jumpy.isJumpyMode"
  },
  {
    "key": "ctrl+k shift+alt+d",
    "command": "vscode-docker.compose.down"
  },
  {
    "key": "ctrl+k alt+d",
    "command": "workbench.action.tasks.test"
  },
  {
    "key": "ctrl+k ctrl+-",
    "command": "workbench.files.action.collapseExplorerFolders"
  },
  {
    "key": "ctrl+backspace",
    "command": "-deleteWordLeft",
    "when": "textInputFocus && !editorReadonly"
  },
  {
    "key": "ctrl+backspace",
    "command": "deleteWordPartLeft",
    "when": "textInputFocus && !editorReadonly"
  },
  {
    "key": "alt+5",
    "command": "-workbench.action.openEditorAtIndex5"
  },
  {
    "key": "alt+5",
    "command": "workbench.action.debug.start",
    "when": "debuggersAvailable && debugState != 'initializing'"
  },
  {
    "key": "f5",
    "command": "-workbench.action.debug.start",
    "when": "debuggersAvailable && debugState != 'initializing'"
  },
  {
    "key": "alt+5",
    "command": "workbench.action.debug.continue",
    "when": "inDebugMode"
  },
  {
    "key": "f5",
    "command": "-workbench.action.debug.continue",
    "when": "inDebugMode"
  },
  {
    "key": "alt+0",
    "command": "workbench.action.debug.stepOver",
    "when": "debugState == 'stopped'"
  },
  {
    "key": "f10",
    "command": "-workbench.action.debug.stepOver",
    "when": "debugState == 'stopped'"
  },
  {
    "key": "alt+-",
    "command": "workbench.action.debug.stepInto",
    "when": "debugState != 'inactive'"
  },
  {
    "key": "f11",
    "command": "-workbench.action.debug.stepInto",
    "when": "debugState != 'inactive'"
  },
  {
    "key": "alt+=",
    "command": "workbench.action.debug.stepOut",
    "when": "debugState == 'stopped'"
  },
  {
    "key": "shift+f11",
    "command": "-workbench.action.debug.stepOut",
    "when": "debugState == 'stopped'"
  },
  {
    "key": "ctrl+shift+alt+5",
    "command": "workbench.action.debug.restart",
    "when": "inDebugMode"
  },
  {
    "key": "ctrl+shift+f5",
    "command": "-workbench.action.debug.restart",
    "when": "inDebugMode"
  },
  {
    "key": "shift+alt+5",
    "command": "workbench.action.debug.stop",
    "when": "inDebugMode && !focusedSessionIsAttach"
  },
  {
    "key": "shift+f5",
    "command": "-workbench.action.debug.stop",
    "when": "inDebugMode && !focusedSessionIsAttach"
  },
  {
    "key": "ctrl+enter",
    "command": "-todo.toggleBox",
    "when": "editorTextFocus && editorLangId == 'todo'"
  },
  {
    "key": "shift+alt+enter",
    "command": "todo.toggleDone",
    "when": "editorTextFocus && editorLangId == 'todo'"
  },
  {
    "key": "alt+d",
    "command": "-todo.toggleDone",
    "when": "editorTextFocus && editorLangId == 'todo'"
  },
  {
    "key": "ctrl+shift+alt+enter",
    "command": "todo.toggleCancelled",
    "when": "editorTextFocus && editorLangId == 'todo'"
  },
  {
    "key": "alt+c",
    "command": "-todo.toggleCancelled",
    "when": "editorTextFocus && editorLangId == 'todo'"
  },
  {
    "key": "ctrl+shift+alt+e",
    "command": "emojisense.quickEmojitext",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+shift+i",
    "command": "-emojisense.quickEmojitext",
    "when": "editorTextFocus"
  },
  {
    "key": "alt+`",
    "command": "workbench.action.terminal.focus"
  },
  {
    "key": "alt+`",
    "command": "workbench.action.focusActiveEditorGroup",
    "when": "terminalFocus"
  },
  {
    "key": "ctrl+-",
    "command": "-workbench.action.zoomOut"
  },
  {
    "key": "ctrl+=",
    "command": "-workbench.action.zoomIn"
  },
  {
    "key": "ctrl+shift+d",
    "command": "editor.action.moveSelectionToPreviousFindMatch"
  },
  {
    "key": "shift+alt+k",
    "command": "lastCursorWordSelect"
  },
  {
    "key": "ctrl+k ctrl+shift+;",
    "command": "editor.action.selectToBracket"
  },
  {
    "key": "ctrl+;",
    "command": "bracketeer.changeBracketsTo"
  },
  {
    "key": "ctrl+shift+alt+u",
    "command": "-bracketeer.changeBracketsTo"
  },
  {
    "key": "ctrl+'",
    "command": "bracketeer.changeQuotesTo"
  },
  {
    "key": "ctrl+shift+'",
    "command": "bracketeer.selectQuotesContent"
  },
  {
    "key": "ctrl+shift+alt+0",
    "command": "-bracketeer.selectQuotesContent"
  },
  {
    "key": "ctrl+shift+;",
    "command": "bracketeer.selectBracketContent"
  },
  {
    "key": "ctrl+shift+alt+h",
    "command": "-bracketeer.selectBracketContent"
  },
  {
    "key": "ctrl+shift+alt+;",
    "command": "-bracketeer.swapQuotes"
  },
  {
    "key": "ctrl+shift+alt+k",
    "command": "-bracketeer.swapBrackets"
  },
  {
    "key": "ctrl+shift+alt+;",
    "command": "bracketeer.removeBrackets"
  },
  {
    "key": "ctrl+shift+alt+i",
    "command": "-bracketeer.removeBrackets"
  },
  {
    "key": "ctrl+q",
    "command": "-workbench.action.quit"
  },
  {
    "key": "alt+left",
    "command": "cursorHome",
    "when": "textInputFocus"
  },
  {
    "key": "home",
    "command": "-cursorHome",
    "when": "textInputFocus"
  },
  {
    "key": "alt+s",
    "command": "workbench.files.action.saveAllInGroup"
  },
  {
    "key": "shift+alt+3",
    "command": "workbench.action.toggleAuxiliaryBar"
  },
  {
    "key": "ctrl+k ctrl+v",
    "when": "editorTextFocus",
    "command": "selectby.pasteClipboard"
  },
  {
    "key": "shift+enter",
    "command": "gitlens.views.switchToCommit",
    "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.commits/"
  },
  {
    "key": "alt+q",
    "command": "workbench.action.focusNextGroup"
  },
  {
    "key": "ctrl+`",
    "command": "workbench.action.terminal.toggleTerminal",
    "when": "terminal.active"
  },
  {
    "key": "ctrl+`",
    "command": "-workbench.action.terminal.toggleTerminal",
    "when": "terminal.active"
  },
  {
    "key": "ctrl+shift+up",
    "command": "editor.action.moveLinesUpAction",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "alt+up",
    "command": "-editor.action.moveLinesUpAction",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+shift+down",
    "command": "editor.action.moveLinesDownAction",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "alt+down",
    "command": "-editor.action.moveLinesDownAction",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "alt+right",
    "command": "cursorEnd",
    "when": "textInputFocus"
  },
  {
    "key": "end",
    "command": "-cursorEnd",
    "when": "textInputFocus"
  },
  {
    "key": "shift+alt+left",
    "command": "cursorHomeSelect",
    "when": "textInputFocus"
  },
  {
    "key": "shift+home",
    "command": "-cursorHomeSelect",
    "when": "textInputFocus"
  },
  {
    "key": "shift+alt+right",
    "command": "cursorEndSelect",
    "when": "textInputFocus"
  },
  {
    "key": "shift+end",
    "command": "-cursorEndSelect",
    "when": "textInputFocus"
  },
  {
    "key": "shift+alt+j",
    "command": "workbench.action.search.toggleQueryDetails",
    "when": "inSearchEditor || searchViewletFocus"
  },
  {
    "key": "ctrl+shift+j",
    "command": "-workbench.action.search.toggleQueryDetails",
    "when": "inSearchEditor || searchViewletFocus"
  },
  {
    "key": "shift+alt+r",
    "command": "editor.action.refactor",
    "when": "editorHasCodeActionsProvider && editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+shift+r",
    "command": "-editor.action.refactor",
    "when": "editorHasCodeActionsProvider && editorTextFocus && !editorReadonly"
  },
  {
    "key": "alt+up",
    "command": "cursorPageUp",
    "when": "textInputFocus"
  },
  {
    "key": "pageup",
    "command": "-cursorPageUp",
    "when": "textInputFocus"
  },
  {
    "key": "alt+down",
    "command": "cursorPageDown",
    "when": "textInputFocus"
  },
  {
    "key": "pagedown",
    "command": "-cursorPageDown",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+k down",
    "command": "-views.moveViewDown",
    "when": "focusedView != ''"
  },
  {
    "key": "ctrl+alt+right",
    "command": "-workbench.action.moveEditorToNextGroup"
  },
  {
    "key": "ctrl+alt+left",
    "command": "-workbench.action.moveEditorToPreviousGroup"
  },
  {
    "key": "ctrl+k ctrl+up",
    "command": "workbench.action.moveEditorToAboveGroup"
  },
  {
    "key": "ctrl+k ctrl+down",
    "command": "workbench.action.moveEditorToBelowGroup"
  },
  {
    "key": "ctrl+k ctrl+left",
    "command": "workbench.action.moveEditorToLeftGroup"
  },
  {
    "key": "ctrl+k ctrl+right",
    "command": "workbench.action.moveEditorToRightGroup"
  },
  {
    "key": "ctrl+k up",
    "command": "workbench.action.newGroupAbove"
  },
  {
    "key": "ctrl+k left",
    "command": "workbench.action.newGroupLeft"
  },
  {
    "key": "ctrl+k ctrl+m",
    "command": "workbench.action.joinAllGroups"
  },
  {
    "key": "ctrl+k ctrl+\\",
    "command": "workbench.action.toggleSplitEditorInGroup"
  },
  {
    "key": "ctrl+k ctrl+\\",
    "command": "-workbench.action.splitEditorOrthogonal"
  },
  {
    "key": "alt+1",
    "command": "outline.focus"
  },
  {
    "key": "alt+4",
    "command": "-workbench.action.openEditorAtIndex4"
  },
  {
    "key": "alt+4",
    "command": "workbench.action.focusAuxiliaryBar"
  },
  // FROM: vscode/src/vs/workbench/contrib/search/browser/searchActions.ts
  // export interface IFindInFilesArgs { 
  //  	query?: string; 
  //  	replace?: string; 
  //  	triggerSearch?: boolean; 
  //  	filesToInclude?: string; 
  //  	filesToExclude?: string; 
  //  	isRegex?: boolean; 
  //  	isCaseSensitive?: boolean; 
  //  	matchWholeWord?: boolean; 
  //  } 
  {
    "key": "alt+f",
    "command": "workbench.action.findInFiles",
    "args": {
      "query": "",
      "triggerSearch": true,
      "filesToInclude": ".snippets/**/*.ts",
      "isRegex": true,
      "useExcludeSettingsAndIgnoreFiles": false
    }
  },
  {
    "key": "ctrl+k ctrl+r",
    "command": "workbench.action.reloadWindow"
  },
  {
    "key": "ctrl+r",
    "command": "-workbench.action.reloadWindow",
    "when": "isDevelopment"
  },
  {
    "key": "alt+backspace",
    "command": "deleteAllLeft"
  },
  {
    "key": "ctrl+e ctrl+e",
    "command": "editor.emmet.action.expandAbbreviation"
  },
  {
    "key": "ctrl+e ctrl+w",
    "command": "editor.emmet.action.wrapWithAbbreviation"
  },
  {
    "key": "ctrl+e ctrl+r",
    "command": "editor.emmet.action.removeTag"
  },
  {
    "key": "ctrl+e ctrl+m",
    "command": "editor.emmet.action.mergeLines"
  },
  {
    "key": "ctrl+e ctrl+s",
    "command": "editor.emmet.action.splitJoinTag"
  },
  {
    "key": "ctrl+e ctrl+u",
    "command": "editor.emmet.action.updateTag"
  },
  {
    "key": "ctrl+e n",
    "command": "editor.emmet.action.nextEditPoint"
  },
  {
    "key": "ctrl+e p",
    "command": "editor.emmet.action.prevEditPoint"
  },
  {
    "key": "ctrl+e ctrl+n",
    "command": "editor.emmet.action.selectNextItem"
  },
  {
    "key": "ctrl+e ctrl+p",
    "command": "editor.emmet.action.selectPrevItem"
  },
  {
    "key": "ctrl+e ctrl+j",
    "command": "editor.emmet.action.matchTag"
  },
  {
    "key": "ctrl+e ctrl+,",
    "command": "editor.emmet.action.balanceIn"
  },
  {
    "key": "ctrl+e ctrl+.",
    "command": "editor.emmet.action.balanceOut"
  },
  {
    "key": "ctrl+e ctrl+=",
    "command": "editor.emmet.action.incrementNumberByOne"
  },
  {
    "key": "ctrl+e ctrl+-",
    "command": "editor.emmet.action.decrementNumberByOne"
  },
  {
    "key": "ctrl+e =",
    "command": "editor.emmet.action.incrementNumberByOneTenth"
  },
  {
    "key": "ctrl+e -",
    "command": "editor.emmet.action.decrementNumberByOneTenth"
  },
  {
    "key": "ctrl+e ctrl+shift+=",
    "command": "editor.emmet.action.incrementNumberByTen"
  },
  {
    "key": "ctrl+e ctrl+shift+-",
    "command": "editor.emmet.action.decrementNumberByTen"
  },
  {
    "key": "ctrl+f",
    "command": "-workbench.action.terminal.focusFind",
    "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
  },
]